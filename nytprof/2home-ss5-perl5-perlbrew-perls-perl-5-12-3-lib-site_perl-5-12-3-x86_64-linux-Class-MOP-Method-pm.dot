digraph {
graph [overlap=false]
subgraph cluster_Class_MOP_Mixin_HasMethods {
	label="Class::MOP::Mixin::HasMethods";
	"Class::MOP::Mixin::HasMethods::add_method";
	"Class::MOP::Mixin::HasMethods::wrap_method_body";
}
subgraph cluster_Class_MOP_Method_Wrapped {
	label="Class::MOP::Method::Wrapped";
	"Class::MOP::Method::Wrapped::wrap";
	"Class::MOP::Method::Wrapped::_new";
}
subgraph cluster_Class_MOP_Method_Meta {
	label="Class::MOP::Method::Meta";
	"Class::MOP::Method::Meta::wrap";
}
subgraph cluster_base {
	label="base";
	"base::import";
}
subgraph cluster_Exporter {
	label="Exporter";
	"Exporter::import";
}
subgraph cluster_Class_MOP_Attribute {
	label="Class::MOP::Attribute";
	"Class::MOP::Attribute::_process_accessors";
}
subgraph cluster_Class_MOP_MiniTrait {
	label="Class::MOP::MiniTrait";
	"Class::MOP::MiniTrait::apply";
}
subgraph cluster_overload {
	label="overload";
	"overload::import";
}
subgraph cluster_Moose_Meta_Attribute {
	label="Moose::Meta::Attribute";
	"Moose::Meta::Attribute::_process_accessors";
}
subgraph cluster_warnings {
	label="warnings";
	"warnings::import";
}
subgraph cluster_Scalar_Util {
	label="Scalar::Util";
	"Scalar::Util::reftype";
	"Scalar::Util::blessed";
	"Scalar::Util::weaken";
}
subgraph cluster_Class_MOP_Method_Accessor {
	label="Class::MOP::Method::Accessor";
	"Class::MOP::Method::Accessor::_new";
}
subgraph cluster_strict {
	label="strict";
	"strict::import";
}
subgraph cluster_Class_MOP_Class {
	label="Class::MOP::Class";
	"Class::MOP::Class::initialize";
	"Class::MOP::Class::new_object";
}
subgraph cluster_Moose_Meta_Role_Method {
	label="Moose::Meta::Role::Method";
	"Moose::Meta::Role::Method::_new";
}
subgraph cluster_Moose_Meta_Method {
	label="Moose::Meta::Method";
	"Moose::Meta::Method::_new";
}
subgraph cluster_Class_MOP_Method {
	label="Class::MOP::Method";
	"Class::MOP::Method::BEGIN@21";
	"Class::MOP::Method::clone";
	"Class::MOP::Method::_new";
	"Class::MOP::Method::BEGIN@10";
	"Class::MOP::Method::attach_to_class";
	"Class::MOP::Method::wrap";
	"Class::MOP::Method::BEGIN@11";
	"Class::MOP::Method::BEGIN@14";
	"Class::MOP::Method::BEGIN@13";
	"Class::MOP::Method::BEGIN@3";
	"Class::MOP::Method::is_stub";
	"Class::MOP::Method::BEGIN@16";
	"Class::MOP::Method::_set_original_method";
}
"Class::MOP::Attribute::_process_accessors" -> "Class::MOP::Method::wrap";
"Class::MOP::Method::Wrapped::wrap" -> "Class::MOP::Method::wrap";
"Class::MOP::Method::Meta::wrap" -> "Class::MOP::Method::wrap";
"Class::MOP::Mixin::HasMethods::wrap_method_body" -> "Class::MOP::Method::wrap";
"base::import" -> "Class::MOP::Method::BEGIN@14";
"Class::MOP::Method::BEGIN@14" -> "Exporter::import";
"Class::MOP::Method::BEGIN@13" -> "Exporter::import";
"base::import" -> "Class::MOP::Method::BEGIN@10";
"Class::MOP::Method::wrap" -> "Scalar::Util::blessed";
"Class::MOP::Method::clone" -> "Scalar::Util::blessed";
"Class::MOP::Method::wrap" -> "Class::MOP::Method::_new";
"Class::MOP::Method::BEGIN@16" -> "base::import";
"base::import" -> "Class::MOP::Method::BEGIN@13";
"Class::MOP::Method::BEGIN@21" -> "overload::import";
"Class::MOP::Method::BEGIN@11" -> "warnings::import";
"Class::MOP::Method::_new" -> "Class::MOP::Class::new_object";
"Class::MOP::Method::_new" -> "Class::MOP::Class::initialize";
"Moose::Meta::Attribute::_process_accessors" -> "Class::MOP::Method::is_stub";
"Class::MOP::Mixin::HasMethods::add_method" -> "Class::MOP::Method::attach_to_class";
"Class::MOP::Method::BEGIN@10" -> "strict::import";
"Class::MOP::Method::wrap" -> "Class::MOP::Method::Wrapped::_new";
"base::import" -> "Class::MOP::Method::BEGIN@16";
"Class::MOP::Mixin::HasMethods::add_method" -> "Class::MOP::Method::clone";
"Class::MOP::MiniTrait::apply" -> "Class::MOP::Method::clone";
"Class::MOP::Method::wrap" -> "Class::MOP::Method::Accessor::_new";
"Class::MOP::Method::wrap" -> "Moose::Meta::Method::_new";
"base::import" -> "Class::MOP::Method::BEGIN@3";
"Class::MOP::Method::wrap" -> "Moose::Meta::Role::Method::_new";
"Class::MOP::Method::wrap" -> "Scalar::Util::weaken";
"Class::MOP::Method::clone" -> "Scalar::Util::weaken";
"Class::MOP::Method::attach_to_class" -> "Scalar::Util::weaken";
"Class::MOP::Method::wrap" -> "Scalar::Util::reftype";
"base::import" -> "Class::MOP::Method::BEGIN@21";
"base::import" -> "Class::MOP::Method::BEGIN@11";
"Class::MOP::Method::clone" -> "Class::MOP::Method::_set_original_method";
}
